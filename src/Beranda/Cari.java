/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Beranda;

import Connect.ConnectDB;
import com.mysql.jdbc.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Date;
//import java.sql.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Dell
 */
public class Cari extends javax.swing.JPanel {

    private Connection conn = (Connection) new ConnectDB().connect();
    private final Dashboard main;

    public Cari(Dashboard main) {
        initComponents();
        this.main = main;
        comboSearchBox();
        spl.setVisible(false);
        nospl.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        niko = new javax.swing.JLabel();
        nikKar = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        spl = new javax.swing.JTextField();
        nospl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        fr = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        fr2 = new com.toedter.calendar.JDateChooser();
        cari = new javax.swing.JComboBox<>();
        nm = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        namkar = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 253, 246));

        jLabel1.setBackground(new java.awt.Color(30, 30, 30));
        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(30, 30, 30));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Pencarian ");

        niko.setBackground(new java.awt.Color(30, 30, 30));
        niko.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        niko.setForeground(new java.awt.Color(30, 30, 30));
        niko.setText("Nomor Induk Karyawan");

        nikKar.setBackground(new java.awt.Color(255, 253, 246));
        nikKar.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        nikKar.setForeground(new java.awt.Color(30, 30, 30));
        nikKar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        nikKar.setPreferredSize(new java.awt.Dimension(64, 50));
        nikKar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nikKarActionPerformed(evt);
            }
        });

        search.setBackground(new java.awt.Color(0, 0, 102));
        search.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        search.setForeground(new java.awt.Color(255, 255, 255));
        search.setText("Cari");
        search.setBorderPainted(false);
        search.setPreferredSize(new java.awt.Dimension(0, 50));
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        spl.setBackground(new java.awt.Color(255, 253, 246));
        spl.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        spl.setForeground(new java.awt.Color(30, 30, 30));
        spl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        spl.setPreferredSize(new java.awt.Dimension(64, 50));
        spl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splActionPerformed(evt);
            }
        });

        nospl.setBackground(new java.awt.Color(30, 30, 30));
        nospl.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        nospl.setForeground(new java.awt.Color(30, 30, 30));
        nospl.setText("No Spl");

        tbl.setBackground(new java.awt.Color(255, 253, 246));
        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tbl);

        jLabel6.setBackground(new java.awt.Color(30, 30, 30));
        jLabel6.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(30, 30, 30));
        jLabel6.setText("Tanggal Awal");

        jLabel7.setBackground(new java.awt.Color(30, 30, 30));
        jLabel7.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(30, 30, 30));
        jLabel7.setText("Tanggal Akhir");

        cari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cariActionPerformed(evt);
            }
        });

        nm.setBackground(new java.awt.Color(30, 30, 30));
        nm.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        nm.setForeground(new java.awt.Color(30, 30, 30));
        nm.setText("Nama Karyawan");

        jLabel9.setBackground(new java.awt.Color(30, 30, 30));
        jLabel9.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(30, 30, 30));
        jLabel9.setText("Cari Layanan");

        namkar.setBackground(new java.awt.Color(255, 253, 246));
        namkar.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        namkar.setForeground(new java.awt.Color(30, 30, 30));
        namkar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        namkar.setPreferredSize(new java.awt.Dimension(64, 50));
        namkar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namkarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 157, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 157, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cari, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(search, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(nikKar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(namkar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(niko, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nospl, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nm, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(fr2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(niko)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nikKar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(namkar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nospl)
                .addGap(10, 10, 10)
                .addComponent(spl, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cari, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fr, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addGap(5, 5, 5)
                .addComponent(fr2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void splActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_splActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        String val = cari.getSelectedItem().toString();
        String no = nikKar.getText();
        String n = spl.getText();
        String nama = namkar.getText();
        Date from = fr.getDate();
        Date to = fr2.getDate();

        if (val.equalsIgnoreCase("Pilih")) {
            DefaultTableModel model = (DefaultTableModel) tbl.getModel();

            model.setRowCount(0);

        } else if (val.equalsIgnoreCase("Absensi")) {
            loadDataAbsen(no, nama, from, to);
            nospl.setVisible(false);
            spl.setVisible(false);
            nikKar.setVisible(true);
            niko.setVisible(true);
        } else if (val.equalsIgnoreCase("Lembur")) {
            loadDataLembur(nama, n, from, to);
            nospl.setVisible(true);
            spl.setVisible(true);
            nikKar.setVisible(false);
            niko.setVisible(false);
        }

    }//GEN-LAST:event_searchActionPerformed

    private void nikKarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nikKarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nikKarActionPerformed

    private void cariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cariActionPerformed

    }//GEN-LAST:event_cariActionPerformed

    private void namkarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namkarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_namkarActionPerformed

    private String comboSearchBox() {
        cari.addItem("Pilih");
        cari.addItem("Absensi");
        cari.addItem("Lembur");
        cari.addItem("Cuti");
        String val = cari.getSelectedItem().toString();

        return val;
    }

    private void loadDataAbsen(String nik, String nama, Date from, Date to) {

        if (nik.isEmpty() && nama.isEmpty()&& from == null && to == null) {
            DefaultTableModel model = new DefaultTableModel();

            model.addColumn("NIK");
            model.addColumn("NAMA KARYAWAN");
            model.addColumn("TANGGAL");
            model.addColumn("STATUS");

            try {
                String sql = """
                         SELECT
                            TK.NIK,
                            TK.NAMA_KARYAWAN,
                            TA. TANGGAL,
                            TA.STATUS_KEHADIRAN
                         FROM TB_KARYAWAN TK 
                         INNER JOIN TB_ABSEN TA ON TA.ID_KARYAWAN = TK.ID_KARYAWAN
                         WHERE TK.RECORD_FLAG <> 'D' 
                       
                       
                         """;
                
                PreparedStatement ps = conn.prepareStatement(sql);
                ResultSet rs = ps.executeQuery();
                
                while (rs.next()) {
                    model.addRow(new Object[]{
                        rs.getString("NIK"),
                        rs.getString("nama_karyawan"),
                        rs.getString("tanggal"),
                        rs.getString("status_kehadiran")
                    });
                }

                tbl.setModel(model);

            } catch (Exception e) {

            }
        } else {
            DefaultTableModel model = new DefaultTableModel();

            model.addColumn("NIK");
            model.addColumn("NAMA KARYAWAN");
            model.addColumn("TANGGAL");
            model.addColumn("STATUS");

            try {
                String sql = """
                         SELECT
                            TK.NIK,
                            TK.NAMA_KARYAWAN,
                            TA. TANGGAL,
                            TA.STATUS_KEHADIRAN
                         FROM TB_KARYAWAN TK 
                         INNER JOIN TB_ABSEN TA ON TA.ID_KARYAWAN = TK.ID_KARYAWAN
                         WHERE 1 = 1 
                         AND (TK.NIK IS NULL OR TK.NIK = '' OR TK.NIK LIKE ?)
                         AND (TK.NAMA_KARYAWAN OR TK.NAMA_KARYAWAN = '' OR TK.NAMA_KARYAWAN LIKE ?)
                         AND (? IS NULL OR TA.TANGGAL >= DATE(?))
                         AND (? IS NULL OR TA.TANGGAL <= DATE(?))
                         """;
                String no = "%" + nik + "%";
                String name = "%" + nama + "%";
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                PreparedStatement ps = conn.prepareStatement(sql);
                
                ps.setString(1, no);
                ps.setString(2, name);
                
                if (from == null) {
                    ps.setNull(3, java.sql.Types.VARCHAR);
                    ps.setNull(4, java.sql.Types.VARCHAR);
                } else {
                    ps.setString(3, sdf.format(from));
                    ps.setString(4, sdf.format(from));
                }
                if (to == null) {
                    ps.setNull(5, java.sql.Types.VARCHAR);
                    ps.setNull(6, java.sql.Types.VARCHAR);
                } else {
                    ps.setString(5, sdf.format(to));
                    ps.setString(6, sdf.format(to));
                }
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    model.addRow(new Object[]{
                        rs.getString("NIK"),
                        rs.getString("nama_karyawan"),
                        rs.getString("tanggal"),
                        rs.getString("status_kehadiran")
                    });
                }

                tbl.setModel(model);

            } catch (Exception e) {

            }
        }

    }

    private void loadDataLembur(String nama, String spl, Date from, Date to) {
        if (nama.isEmpty() && spl.isEmpty() && from == null && to == null) {
            DefaultTableModel model = new DefaultTableModel();

            model.addColumn("NO SPL");
            model.addColumn("NAMA KARYAWAN");
            model.addColumn("TANGGAL");
            model.addColumn("JAM MULAI");
            model.addColumn("JAM SELESAI");
            model.addColumn("KETERANGAN");

            try {
                String sql = """
                         SELECT
                            TL.SPL_NO,
                            TK.NAMA_KARYAWAN,
                            TL.TANGGAL,
                            TL.JAM_MULAI,
                            TL.JAM_SELESAI,
                            TL.KETERANGAN
                         FROM TB_LEMBUR TL 
                         INNER JOIN TB_KARYAWAN TK ON TL.ID_KARYAWAN = TK.ID_KARYAWAN
                         """;
                PreparedStatement ps = conn.prepareStatement(sql);

                ResultSet rs = ps.executeQuery();

                while (rs.next()) {
                    model.addRow(new Object[]{
                        rs.getString("SPL_NO"),
                        rs.getString("nama_karyawan"),
                        rs.getString("tanggal"),
                        rs.getString("jam_mulai"),
                        rs.getString("jam_selesai"),
                        rs.getString("keterangan")
                    });
                }

                tbl.setModel(model);

            } catch (Exception e) {

            }
        } else {
            DefaultTableModel model = new DefaultTableModel();

            model.addColumn("NO SPL");
            model.addColumn("NAMA KARYAWAN");
            model.addColumn("TANGGAL");
            model.addColumn("JAM MULAI");
            model.addColumn("JAM SELESAI");
            model.addColumn("KETERANGAN");

            try {
                String sql = """
                             SELECT
                             TL.SPL_NO,
                             TK.NAMA_KARYAWAN,
                             TL.TANGGAL,
                             TL.JAM_MULAI,
                             TL.JAM_SELESAI,
                             TL.KETERANGAN
                             FROM TB_LEMBUR TL 
                             INNER JOIN TB_KARYAWAN TK ON TL.ID_KARYAWAN = TK.ID_KARYAWAN
                             WHERE  (TK.NAMA_KARYAWAN IS NULL OR TK.NAMA_KARYAWAN = '' OR TK.NAMA_KARYAWAN LIKE ?)
                             AND (TL.SPL_NO OR TL.SPL_NO = '' OR TL.SPL_NO LIKE ?)
                             AND (? IS NULL OR TL.TANGGAL >= DATE(?))
                             AND (? IS NULL OR TL.TANGGAL <= DATE(?))
                             """;
                String name = "%" + nama + "%";
                String n = "%" + spl + "%";

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

                PreparedStatement ps = conn.prepareStatement(sql);

                ps.setString(1, name);
                ps.setString(2, n);

//                ps.setString(3, sdf.format(from));
//                ps.setString(4, sdf.format(from));
                if (from == null) {
                    ps.setNull(3, java.sql.Types.VARCHAR);
                    ps.setNull(4, java.sql.Types.VARCHAR);
                } else {
                    ps.setString(3, sdf.format(from));
                    ps.setString(4, sdf.format(from));
                }

//                ps.setString(5, sdf.format(to));
//                ps.setString(6, sdf.format(to));
                if (to == null) {
                    ps.setNull(5, java.sql.Types.VARCHAR);
                    ps.setNull(6, java.sql.Types.VARCHAR);
                } else {
                    ps.setString(5, sdf.format(to));
                    ps.setString(6, sdf.format(to));
                }

                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    model.addRow(new Object[]{
                        rs.getString("SPL_NO"),
                        rs.getString("NAMA_KARYAWAN"),
                        rs.getString("TANGGAL"),
                        rs.getString("JAM_MULAI"),
                        rs.getString("JAM_SELESAI"),
                        rs.getString("KETERANGAN")
                    });
                }

                tbl.setModel(model);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "tidak masuk ke query" + e.getMessage());
            }
        }

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cari;
    private com.toedter.calendar.JDateChooser fr;
    private com.toedter.calendar.JDateChooser fr2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField namkar;
    private javax.swing.JTextField nikKar;
    private javax.swing.JLabel niko;
    private javax.swing.JLabel nm;
    private javax.swing.JLabel nospl;
    private javax.swing.JButton search;
    private javax.swing.JTextField spl;
    private javax.swing.JTable tbl;
    // End of variables declaration//GEN-END:variables
}
